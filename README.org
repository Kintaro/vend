#+title: Vend

=vend= is a dependency management tool for Common Lisp. The concept is simple:

#+begin_quote
Just vendor your dependencies!
#+end_quote

=vend='s focus is first and foremost on *simplicity*.

- =vend get= to fetch dependencies directly into your project.
- =vend repl= to open an isolated Lisp session.
- =vend= only has 3 dependencies itself and compiles to a 300kb binary.
- Neither Quicklisp (the tool) nor Quicklisp (the repository) are used.
- Trivial integration with Sly / Slime.

It's time for some peace of mind.

* Table of Contents :TOC_5_gh:noexport:
- [[#why-vendor-dependencies][Why vendor dependencies?]]
  - [[#why-vend][Why vend?]]
  - [[#best-practices][Best Practices]]
- [[#installation][Installation]]
  - [[#from-source][From Source]]
  - [[#linux][Linux]]
    - [[#arch][Arch]]
- [[#editor-integration][Editor Integration]]
  - [[#emacs][Emacs]]
    - [[#doom-emacs][Doom Emacs]]
- [[#usage][Usage]]
  - [[#vend-get][vend get]]
  - [[#vend-repl][vend repl]]
  - [[#vend-graph][vend graph]]
  - [[#vend-check][vend check]]
- [[#coverage][Coverage]]
- [[#faq][FAQ]]
  - [[#does-this-use-git-submodules][Does this use git submodules?]]
  - [[#can-i-install-new-dependencies-while-vend-repl-is-running][Can I install new dependencies while =vend repl= is running?]]
  - [[#how-do-i-update-dependencies][How do I update dependencies?]]
  - [[#why-ecl][Why ECL?]]

* Why vendor dependencies?

Fast internet connections and centralised repositories have gotten us used to
the idea that dependencies are free; things we can pluck off a shelf and employ
with no risk. In languages like Javascript and Rust, it's not uncommon to have
projects with several hundred dependencies.

But are these really free? Have you inspected each one? Do you know and trust
the authors, as well as the pipeline that feeds you updates? Is your project
still guaranteed to compile in 5-10 years with no extra intervention? Can you
write code on a plane? Can users reliably build your project after little more
than a =git clone=?

The truth is that your dependencies are your code. And quite literally so - they
might make up the majority of your final compiled artifact. By vendoring your
dependencies directly into your project, you're taking responsibility for its
true form.

** Why vend?

Dependency management in Common Lisp has traditionally centred around [[https://www.quicklisp.org/beta/][Quicklisp]].
A desire for access to more rapid package updates spawned [[https://ultralisp.org/][Ultralisp]]. The need
for version pinning and isolation birthed [[https://github.com/fukamachi/qlot][Qlot]]. The want for a better
distribution system brought us [[https://github.com/ocicl/ocicl][OCICL]].

But, could there be a simpler paradigm than just /downloading the code and
putting it right there/?

With =vend=:

- We need not perform bespoke installation scripts to get started.
- We need not wait for Quicklisp to update.
- We need not relegate all our systems to =~/common-lisp/=.
- We need not worry about where ASDF is looking for systems.
- We need not fret over tools performing strange internal overrides.
- We need not manage extra config files or lockfiles.

Plus, =vend= is actually an external tool with extra commands to help you inspect
and manage your dependencies.

** Best Practices

For library development, you are encouraged to:

1. =vend get= to fetch dependencies.
2. Add =vendored/*= to your =.gitignore=.

As this allows downstream users the most freedom when consuming your library.

For application development, you are encouraged to:

1. =vend get= to fetch dependencies.
2. =rm -rf vendored/**/.git/=
3. Actively commit =vendored/= to git.

By committing these dependencies directly, it is never a mystery to your users
how your software should be provisioned.

* Installation

In all cases, =vend= requires [[https://ecl.common-lisp.dev/][ECL]] to build and run.

** From Source

=vend='s dependencies are all vendored, so it is enough to run:

#+begin_example
ecl --load build.lisp
mv vend ~/.local/bin/
#+end_example

** Linux

*** Arch

* Editor Integration
** Emacs

Sly and Slime have variables for setting how Lisp REPLs should be launched:

#+begin_src emacs-lisp
(setq sly-default-lisp 'sbcl
      sly-lisp-implementations '((sbcl  ("vend" "repl" "sbcl")  :coding-system utf-8-unix)
                                 (ecl   ("vend" "repl" "ecl")   :coding-system utf-8-unix)
                                 (abcl  ("vend" "repl" "abcl")  :coding-system utf-8-unix)
                                 (clasp ("vend" "repl" "clasp") :coding-system utf-8-unix)))
#+end_src

Adjust as necessary for Slime.

Note that adding ="--dynamic-space-size" "4GB"= to the =sbcl= list is useful for
hungry projects like [[https://github.com/Shirakumo/trial][Trial]].

#+begin_quote
⚠ You must start your Lisp session from the top-level of the repository. Doing
so from the =.asd= file makes it easy.
#+end_quote

*** Doom Emacs

As of 2025 January, you also need to manually disable =sly-stepper= and
=sly-quicklisp= or they will interfere with the REPL starting:

#+begin_src emacs-lisp
(package! sly-stepper :disable t)
(package! sly-quicklisp :disable t)
#+end_src

* Usage
** vend get

From the top-level directory of your project, simply =vend get= to fetch all
dependencies. They will be stored in =vendored/=. From here, they are yours. You
are free to inspect, edit, and remove them as you please.

#+begin_example
> vend get
[vend] Downloading dependencies.
[vend] Fetching FN-MACRO
[vend] Fetching ARROW-MACROS
[vend] Fetching TRANSDUCERS
...
[vend] Done.
#+end_example

If during your usage of =vend= you discover a project that fails to resolve,
please [[https://github.com/fosskers/vend/issues][open an Issue]].

** vend repl

From the top-level directory of your project, =vend repl= opens a Lisp REPL while
instructing ASDF to only look within this directory tree for =.asd= files.

#+begin_example
> vend repl
This is SBCL 2.4.9, an implementation of ANSI Common Lisp.
> (asdf:load-system :transducers)
; Lots of compilation here.
T
>
#+end_example

By default, =vend repl= starts SBCL. You can easily override this:

#+begin_example
> vend repl ecl
ECL (Embeddable Common-Lisp) 24.5.10
> (+ 1 1)
#+end_example

=vend repl= actually accepts any number of arguments, which is useful for adding
additional settings for hungry projects like [[https://github.com/Shirakumo/trial][Trial]]:

#+begin_example
> vend repl sbcl --dynamic-space-size 4GB
#+end_example

** vend graph

After running =vend get=, you can inspect your full dependency graph via =vend graph=:

#+begin_example
> vend graph
#+end_example

This produces a =deps.dot= file, which can be viewed directly with =xdot=:

#+begin_example
> xdot deps.dot
#+end_example

Or you can render it into a static PNG to send around to your friends to brag
about how few dependencies you're using:

#+begin_example
> cat deps.dot | dot -Tpng -o deps.png
#+end_example

In the case of =vend=, this produces an image like:

[[file:deps.png]]

If the graph is too messy, you can "focus" it with an extra argument to =vend graph=:

#+begin_example
vend graph lem
#+end_example

In the case of the large [[https://github.com/lem-project/lem][Lem]] project, this would display a graph of only the
core application and not its test suites, etc.

** vend check

Since your dependencies are your code, you should care about what's in there.

#+begin_example
> vend check
DYNAMIC-CLASSES is deprecated.
  PGLOADER -> CL-MARKDOWN -> DYNAMIC-CLASSES
TRIVIAL-BACKTRACE is deprecated.
  PGLOADER -> TRIVIAL-BACKTRACE
#+end_example

Woops! And while Common Lisp has a culture of "done means done, not dead", it's
still important to know what you're getting yourself into.

* Coverage

=vend= does not cover all of what's available on Quicklisp, but it does have
significant enough coverage to resolve and compile a number of large, modern
projects:

- Resolves: Does =vend get= complete?
- Compiles: Does =(asdf:load-system :foo)= within =vend repl= complete?

| Project  | Resolves? | Compiles? | Notes                            |
|----------+-----------+-----------+----------------------------------|
| [[https://github.com/Shirakumo/alloy][Alloy]]    | ✅       | ✅       |                                  |
| [[https://github.com/Shirakumo/kandria][Kandria]]  | ✅       | ✅       |                                  |
| [[https://github.com/lem-project/lem][Lem]]      | ✅       | ✅       |                                  |
| [[https://github.com/fukamachi/mito][Mito]]     | ✅       | ✅       |                                  |
| [[https://github.com/atlas-engineer/nyxt][Nyxt]]     | ✅       | ✅       |                                  |
| [[https://github.com/fukamachi/qlot][Qlot]]     | ❌       | ❌       | Usage of =package-inferred-system= |
| [[https://github.com/Shirakumo/radiance][Radiance]] | ✅       | ❌       | Requires QL, but: [[https://github.com/quicklisp/quicklisp-client/issues/125][(1)​]] [[https://github.com/quicklisp/quicklisp-client/issues/140][(2)​]]       |
| [[https://github.com/Shirakumo/trial][Trial]]    | ✅       | ✅       |                                  |
| [[https://github.com/fukamachi/woo][Woo]]      | ✅       | ✅       |                                  |

If during your usage of =vend= you discover a project that fails to resolve,
please [[https://github.com/fosskers/vend/issues][open an Issue]].

* FAQ

** Does this use git submodules?

No. Submodules need to be recloned by your users, which is a weaker long-term
guarantee than true vendoring. Submodules are also a pain in the neck to manage.
If you want to change and make new commits to vendored dependencies, you're
still free to do so.

** Can I install new dependencies while =vend repl= is running?

Probably not. At least, =vend= assumes that Quicklisp doesn't exist, and it tells
ASDF to only look for systems in the current directory tree. It's not clear what
a call to =(ql:quickload ...)= would do in that case.

If you want new packages available to =vend repl=, you can:

- Manually clone them into =vendored/=.
- Add them to your =.asd= explicitly and call =vend get=.

** How do I update dependencies?

The intent is that by vendoring, you're taking responsibility for the "true
shape" of your program. So, upgrading dependencies should always be a conscious
choice, done for a specific reason. Therefore there is no "bulk update" button.

To update a single dependency, you can =git pull= it specifically. If you've
already committed that dependency to your repo (as in the application case),
you're still able to:

#+begin_example
rm -rf vendored/old-dep
vend get
rm -rf vendored/old-dep/.git/
#+end_example

But you're discouraged from doing this habitually.

** Why ECL?

=vend= itself is built with ECL but you're free to use it to manage Lisp projects
of any compiler. ECL typically produces very small binaries; in the case of
=vend= it's only a few hundred kilobytes, which eases distribution.
